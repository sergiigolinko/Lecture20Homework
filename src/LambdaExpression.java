import java.util.function.*;

public class LambdaExpression {
    public static void main(String[] args) {
        Function<String,String> function=(s1)->s1.concat("drt");
        System.out.println(function.apply("jkmk"));
        BiConsumer<Integer,Integer> biConsumer=(a,b)-> System.out.println(a+b);
        biConsumer.accept(3,5);
        BiFunction<String,String,String> biFunction=(s1,s2)-> s1.replaceFirst("a",s2);
        System.out.println(biFunction.apply("ay","fvdc"));
        BinaryOperator<Integer>binaryOperator=(a,b)->a*b;
        System.out.println(binaryOperator.apply(4,5));
        BiPredicate<Integer,Integer>biPredicate=(a,b)->a.equals(b);
        System.out.println(biPredicate.test(3,4));
        BooleanSupplier booleanSupplier=()->Boolean.logicalAnd(true,true);
        System.out.println(booleanSupplier.getAsBoolean());
        Consumer<Double>consumer=(a)-> System.out.println(Math.sqrt(a));
        consumer.accept(9.0);
        DoubleBinaryOperator doubleBinaryOperator=(a,b)-> Math.abs(a)+Math.asin(b);
        System.out.println(doubleBinaryOperator.applyAsDouble(2.1,1.0));
        DoubleConsumer doubleConsumer=(a)-> System.out.println(Math.getExponent(a));
        doubleConsumer.accept(5.3);
        DoubleFunction<Double>doubleFunction=(a)->Double.valueOf(a);
        System.out.println(doubleFunction.apply(5.5));
        DoublePredicate doublePredicate=(a)->Double.isFinite(a);
        System.out.println(doublePredicate.test(6.8));
        DoubleSupplier doubleSupplier=()-> Double.max(3.2,9.8);
        System.out.println(doubleSupplier.getAsDouble());
        DoubleToIntFunction doubleToIntFunction=(a)->Double.hashCode(a);
        System.out.println(doubleToIntFunction.applyAsInt(435988));
        DoubleToLongFunction doubleToLongFunction=(a)->Double.doubleToLongBits(a);
        System.out.println(doubleToLongFunction.applyAsLong(6544));
        DoubleUnaryOperator doubleUnaryOperator=(a)->Math.atan(a);
        System.out.println(doubleUnaryOperator.applyAsDouble(6.3));
        IntBinaryOperator intBinaryOperator=(a,b)->Integer.rotateLeft(a,1)+Integer.rotateRight(b,1);
        System.out.println(intBinaryOperator.applyAsInt(34,45));
        IntConsumer intConsumer=(a)-> System.out.println(Integer.bitCount(a));
        intConsumer.accept(58);
        IntFunction<Integer>intFunction=(a)->Integer.numberOfLeadingZeros(a);
        System.out.println(intFunction.apply(98));
        IntPredicate intPredicate=(a)->a>0;
        System.out.println(intPredicate.test(8));
        IntSupplier intSupplier=()->Integer.compare(3,6);
        System.out.println(intSupplier.getAsInt());
        IntToDoubleFunction intToDoubleFunction=(a)->Integer.highestOneBit(a);
        System.out.println(intToDoubleFunction.applyAsDouble(8));
        IntToLongFunction intToLongFunction=(a)->Integer.signum(a);
        System.out.println(intToLongFunction.applyAsLong(76));
        IntUnaryOperator intUnaryOperator=(a)->Integer.bitCount(a);
        System.out.println(intUnaryOperator.applyAsInt(8));
        LongBinaryOperator longBinaryOperator=(a,b)->Long.sum(a,b);
        System.out.println(longBinaryOperator.applyAsLong(4646,54545151));
        LongConsumer longConsumer=(a)-> System.out.println(Long.reverse(a));
        longConsumer.accept(4616164);
        LongFunction<Long> longFunction=(a)->Long.valueOf(a);
        System.out.println(longFunction.apply(34532345));
        LongPredicate longPredicate=(a)->a%10==50;
        System.out.println(longPredicate.test(34325));
        LongSupplier longSupplier=()->Long.getLong("fvfvf",897765);
        System.out.println(longSupplier.getAsLong());
        LongToDoubleFunction longToDoubleFunction=(a)->Long.reverseBytes(a);
        System.out.println(longToDoubleFunction.applyAsDouble(89897));
        LongToIntFunction longToIntFunction=(a)-> (int) Math.incrementExact(a);
        System.out.println(longToIntFunction.applyAsInt(662613));
        LongUnaryOperator longUnaryOperator=(a)->Math.decrementExact(a);
        System.out.println(longUnaryOperator.applyAsLong(641664));
        ObjDoubleConsumer<Double> objDoubleConsumer=(a,b)-> System.out.println(Double.max(a,b));
        objDoubleConsumer.accept(53.5,54.2);
        ObjIntConsumer<Integer> objIntConsumer=(a,b)-> System.out.println(Integer.max(a,b));
        objIntConsumer.accept(45,48);
        ObjLongConsumer<Long>objLongConsumer=(a,b)-> System.out.println(Long.max(a,b));
        objLongConsumer.accept((long) 5451,541616);
        Predicate<String> predicate=(a)->a.endsWith("l");
        System.out.println(predicate.test("qll"));
        Supplier<Character> supplier=()->Character.toLowerCase('M');
        System.out.println(supplier.get());
        ToDoubleBiFunction<Double,Integer> toDoubleBiFunction=(a,b)->Math.abs(a)+Math.abs(b);
        System.out.println(toDoubleBiFunction.applyAsDouble(23.0,23));
        ToDoubleFunction<Integer> toDoubleFunction=(a)->Math.signum(a);
        System.out.println(toDoubleFunction.applyAsDouble(5));
        ToIntBiFunction<String,String> toIntBiFunction=(a,b)->a.length()+b.length();
        System.out.println(toIntBiFunction.applyAsInt("asd","qwer"));
        ToIntFunction<String> toIntFunction=(a)->a.compareTo("kln");
        System.out.println(toIntFunction.applyAsInt("kln"));
        ToLongBiFunction<Integer,Integer> toLongBiFunction=(a,b)->Math.decrementExact(a)/Math.incrementExact(b);
        System.out.println(toLongBiFunction.applyAsLong(32,56));
        ToLongFunction<Double> toLongFunction=(a)->Double.doubleToLongBits(a);
        System.out.println(toLongFunction.applyAsLong(43.56));
        UnaryOperator<String> unaryOperator=(a)->a.toUpperCase();
        System.out.println(unaryOperator.apply("kkmmm"));


    }
}
